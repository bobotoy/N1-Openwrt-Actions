#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build OpenWrt

on:
#  release:
#    types: [published]
  push:
    branches:
      - master
    paths:
      - 'N1.config'
      - 'n1/**'
      - '.github/workflows/N1.yml'
  schedule:
    - cron: 0 19 * * *
#  watch:
#    types: [started]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede.git
  REPO_BRANCH: master
  CONFIG_FILE: N1.config
  DIY_SH: diy.sh
  FREE_UP_DISK: true
  SSH_ACTIONS: true
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  FILE_NAME: N1-Openwrt-$(date +%m%d)

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc
    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet
        docker rmi `docker images -q`
        sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
    - name: Clone source code # 克隆的源代码
      id: openwrt
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "::set-env name=useVersionInfo::$useVersionInfo"
        echo "::set-env name=DATE::$(date "+%Y-%m-%d %H:%M:%S")"
        echo "::set-env name=tag_name::$(date +%Y%m%d)"
      
    - name: Clone other packages
      run: |
        git clone https://github.com/Mrbai98/luci-theme-atmaterial.git openwrt/package/luci-theme-atmaterial
        git clone https://github.com/rufengsuixing/luci-app-adguardhome.git openwrt/package/luci-app-adguardhome && echo "#https://cdn.jsdelivr.net/gh/AdguardTeam/AdGuardHome/AdGuardHome_linux_${Arch}.tar.gz" > openwrt/package/luci-app-adguardhome/root/usr/share/AdGuardHome/links.txt
        git clone https://github.com/pymumu/smartdns.git openwrt/package/smartdns
        git clone https://github.com/Apocalypsor/luci-app-smartdns.git openwrt/package/luci-app-smartdns
        git clone https://github.com/frainzy1477/luci-app-clash.git openwrt/package/luci-app-clash
        git clone https://github.com/project-openwrt/luci-app-koolproxyR.git openwrt/package/luci-app-koolproxyR
        git clone https://github.com/vernesong/OpenClash.git && mv OpenClash/luci-app-openclash openwrt/package/luci-app-openclash
    - name: Update Feeds
      run: |
       cd openwrt
       echo "src-git lienol https://github.com/Lienol/openwrt-package" >> feeds.conf.default
       ./scripts/feeds update -a
    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a
              
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH
     #若使用./scripts/diffconfig.sh > config.seed生成的差异文件恢复扩展为完整的.config配置文件请删除下行注释符号
     #   make defconfig

    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        ./scripts/diffconfig.sh > seed.config     
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"
    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_directory
        path: openwrt/bin
    
    - name: Upload Config
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.SSH_ACTIONS == 'true'
      with:
        name: OpenWrt_config
        path: openwrt/.config

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages openwrt-armvirt-64-default.manifest openwrt-armvirt-64-Image openwrt-armvirt-64-root.squashfs.gz sha256sums
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"
    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}
        
    - name: Docker file - copy Docker file
      run: |
        cp ${{ env.FIRMWARE }}/* n1
        
    - name: Login - DockerHub
      run:  docker login -u ${{secrets.DOCKER_HUB_NAME}} -p ${{secrets.DOCKER_HUB_PWD}}

    - name: Image - build&push docker image
      run: |
        cd n1
        sudo bash build.sh $(date +%m%d)
        
    - name: Upload - push to artifact file
      uses: actions/upload-artifact@master
      with:
        name: docker-n1
        path: n1/opt/imgs
    
    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE }} / N1-Openwrt | 自动编译
        allowUpdates: true
        tag: ${{ env.tag_name }}
        commit: master
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          当前使用版本:（编译前的最后一次源码更新记录）
          ${{ env.useVersionInfo }}
        artifacts: "${{ env.FIRMWARE }}/* , openwrt/.config , n1/opt/imgs/*"

    - name: WeChat notification
      run: curl https://sc.ftqq.com/${{ secrets.ServerChan }}.send?text=${{ env.FILE_NAME }}编译完成
